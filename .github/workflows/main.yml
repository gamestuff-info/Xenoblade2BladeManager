name: CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test:
    name: Test (PHP ${{ matrix.php-versions }} on ${{ matrix.operating-system }})
    runs-on: ${{ matrix.operating-system }}
    defaults:
      run:
        working-directory: './app'
    strategy:
      fail-fast: true
      matrix:
        operating-system:
          - ubuntu-20.04
        php-versions:
          - 7.4
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          ini-values: display_errors=On
          extensions: intl, iconv, json, mbstring, pcntl, pdo_sqlite, xml, zip
      - name: Setup problem matchers for PHPUnit
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"
      - name: Get cache directories
        id: cache-dirs
        run: |
          echo "::set-output name=composer::$(composer config cache-files-dir)"
          echo "::set-output name=yarn::$(yarn cache dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.cache-dirs.outputs.composer }}
            ${{ steps.cache-dirs.outputs.yarn }}
          key: ${{ runner.os }}-deps-${{ hashFiles('**/composer.lock') }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-deps-
      - name: Install PHP dependencies
        run: |
          composer install --prefer-dist --optimize-autoloader
          php vendor/bin/simple-phpunit install
      - name: Install Yarn dependencies
        run: yarn install --non-interactive  --frozen-lockfile
      - name: Build assets
        run: yarn run build
      - name: Run Tests
        run: php vendor/bin/simple-phpunit -c phpunit.xml.dist

  deploy:
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Create deployment
        run: doctl app create-deployment c8fcbe2e-9ce9-4a05-a65f-3891c7ade2da

  notify:
    runs-on: ubuntu-latest
    needs:
      - deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: dan-keenan
          SENTRY_PROJECT: xeno2
        with:
          environment: prod
