#######################################
# BASE IMAGE
#######################################
FROM php:8.0-apache as base

WORKDIR /var/www

# Production PHP.ini
RUN cp ${PHP_INI_DIR}/php.ini-production ${PHP_INI_DIR}/php.ini

# Install needed extensions
COPY --from=mlocati/php-extension-installer /usr/bin/install-php-extensions /usr/local/bin/
RUN install-php-extensions intl iconv opcache json pcntl pdo_pgsql xml zip

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
RUN { \
		echo 'opcache.memory_consumption=128'; \
		echo 'opcache.interned_strings_buffer=8'; \
		echo 'opcache.max_accelerated_files=4000'; \
		echo 'opcache.revalidate_freq=60'; \
		echo 'opcache.fast_shutdown=1'; \
	} > ${PHP_INI_DIR}/conf.d/opcache-recommended.ini

# Web server configuration
COPY docker/app/app.apache2.conf ${APACHE_CONFDIR}/sites-available/app.conf
RUN a2ensite app; \
    a2dissite 000-default; \
    a2enmod rewrite

COPY docker/app/entrypoint.sh /usr/local/bin/app_entrypoint
ENTRYPOINT /usr/local/bin/app_entrypoint

#######################################
# COMPOSER
#######################################
FROM base as composer

COPY --from=composer:2 /usr/bin/composer /usr/local/bin/composer

RUN rm -rf /var/www && mkdir /var/www
WORKDIR /var/www

COPY app/. /var/www

ARG APP_ENV=prod

RUN set -xe; \
    if [ "$APP_ENV" = "prod" ]; then export ARGS="--no-dev"; fi; \
    composer install --prefer-dist --no-scripts --no-progress --no-suggest --no-interaction --optimize-autoloader $ARGS

#######################################
# ASSETS
#######################################
FROM node:12-alpine as webpack

ARG APP_ENV=prod

RUN rm -rf /var/www && mkdir /var/www
WORKDIR /var/www

COPY app/public app/yarn.lock app/package.json app/postcss.config.js app/webpack.config.js /var/www/
COPY app/assets /var/www/assets

RUN set -xe \
    && if [ "$APP_ENV" = "prod" ]; then export ARGS="--production"; fi \
    && yarn install --non-interactive  --frozen-lockfile $ARGS

RUN set -xe \
    && if [ "$APP_ENV" = "prod" ]; then export SCRIPT="build"; else export SCRIPT="dev"; fi \
    && yarn run $SCRIPT

#######################################
# APPLICATION
#######################################
FROM base as app

COPY --from=composer /var/www/ /var/www/
COPY --from=webpack /var/www/public /var/www/public

RUN mkdir -p var/cache; \
    chown -R www-data:www-data var

#######################################
# DEVELOPMENT SUPPORT
#######################################
FROM app as app_dev

RUN cp "$PHP_INI_DIR/php.ini-development" "$PHP_INI_DIR/php.ini"

# Install some helper utilities for server debugging
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends bash less nano psmisc

# Install xdebug
RUN install-php-extensions xdebug
RUN { \
		echo 'xdebug.mode=debug'; \
		echo 'xdebug.discover_client_host=1'; \
	} >> ${PHP_INI_DIR}/conf.d/docker-php-ext-xdebug.ini

# Setup mailhog
RUN { \
		echo 'sendmail_path = /usr/sbin/sendmail -S mail:1025'; \
	} > ${PHP_INI_DIR}/conf.d/mailhog.ini
